{"version":3,"sources":["img/avatar.jpeg","img/ocean.mp4","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","display","margin","spacing","small","width","height","large","Section","Grid","container","item","xs","direction","justify","alignItems","style","this","props","children","React","Component","App","classes","autoPlay","muted","loop","id","zIndex","src","OceanMP4","type","Avatar","alt","Avatar_IMG","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kHAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,4QCSrCC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,QAAS,OACT,QAAS,CACPC,OAAQH,EAAMI,QAAQ,KAG1BC,MAAO,CACLC,MAAON,EAAMI,QAAQ,GACrBG,OAAQP,EAAMI,QAAQ,IAExBI,MAAO,CACLF,MAAON,EAAMI,QAAQ,IACrBG,OAAQP,EAAMI,QAAQ,SAqBpBK,E,iLAEF,OACE,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,MAAI,EACJC,GAAI,GACJC,UAAU,MACVC,QAAQ,SACRC,WAAW,SACXC,MAAO,CAAEV,OAAQ,UAEhBW,KAAKC,MAAMC,c,GAZEC,IAAMC,WAmCbC,MAlBf,WACE,IAAMC,EAAU1B,IAChB,OACE,kBAACY,EAAA,EAAD,CAAMC,WAAS,GACb,kBAAC,EAAD,KACE,kBAACD,EAAA,EAAD,KACE,2BAAOe,UAAQ,EAACC,OAAK,EAACC,MAAI,EAACC,GAAG,UAAUX,MAAO,CAAEY,OAAQ,SACvD,4BAAQC,IAAKC,IAAUC,KAAK,eAE9B,kBAACC,EAAA,EAAD,CAAQC,IAAI,MAAMJ,IAAKK,IAAYC,UAAWZ,EAAQhB,QACtD,+CAGJ,kBAAC,EAAD,QC7Dc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.02a99cc8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.f8d76bb2.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/ocean.b1fc8446.mp4\";","import React from \"react\";\nimport \"./App.css\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nimport Avatar_IMG from \"./img/avatar.jpeg\";\nimport OceanMP4 from './img/ocean.mp4';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: \"flex\",\n    \"& > *\": {\n      margin: theme.spacing(1)\n    }\n  },\n  small: {\n    width: theme.spacing(3),\n    height: theme.spacing(3)\n  },\n  large: {\n    width: theme.spacing(30),\n    height: theme.spacing(30)\n  }\n}));\nconst BackgroundVideo = () => (\n  <div className=\"homepage-hero-module\">\n    <div className=\"video-container\">\n      <div className=\"filter\"></div>\n      <video\n        autoPlay\n        loop\n        muted\n        playsInline\n        src=\"./img/ocean.mp4\"\n        className=\"fillWidth\"\n      ></video>\n      <div className=\"poster hidden\">\n        <img src=\"./img/ocean.jpg\" alt=\"\" />\n      </div>\n    </div>\n  </div>\n);\nclass Section extends React.Component {\n  render() {\n    return (\n      <Grid\n        container\n        item\n        xs={12}\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n        style={{ height: \"100vh\" }}\n      >\n        {this.props.children}\n      </Grid>\n    );\n  }\n}\nfunction App() {\n  const classes = useStyles();\n  return (\n    <Grid container>\n      <Section>\n        <Grid>\n          <video autoPlay muted loop id=\"myVideo\" style={{ zIndex: \"-100\" }}>\n            <source src={OceanMP4} type=\"video/mp4\" />\n          </video>\n          <Avatar alt=\"zsh\" src={Avatar_IMG} className={classes.large} />\n          <h1>Zhao Shou Hao</h1>\n        </Grid>\n      </Section>\n      <Section></Section>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}